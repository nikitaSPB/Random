{"ast":null,"code":"var _jsxFileName = \"/Users/nikita.sp/Desktop/random/src/App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport { useState } from \"react\";\nimport Papa from \"papaparse\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [cache, setCache] = useState(new Set());\n  // State to store parsed data\n  // const [parsedData, setParsedData] = useState([]);\n\n  //State to store table Column name\n  // const [tableRows, setTableRows] = useState([]);\n\n  //State to store the values\n  const [values, setValues] = useState([]);\n  const [item, setItem] = useState();\n  const [dupl, setDupl] = useState(false);\n  const changeHandler = event => {\n    // Passing file data (event.target.files[0]) to parse using Papa.parse\n    Papa.parse(event.target.files[0], {\n      header: true,\n      skipEmptyLines: true,\n      complete: function (results) {\n        // const rowsArray = [];\n        const valuesArray = [];\n\n        // Iterating data to get column name and their values\n        results.data.map(d => {\n          // rowsArray.push(Object.keys(d));\n          valuesArray.push(Object.values(d));\n        });\n\n        // const item = valuesArray[Math.floor(Math.random()*valuesArray.length)]\n        setItem(valuesArray[Math.floor(Math.random() * valuesArray.length)]);\n\n        // Parsed Data Response in array format\n        // setParsedData(results.data);\n\n        // Filtered Column Names\n        // setTableRows(rowsArray[0]);\n\n        // Filtered Values\n        // setValues(valuesArray);\n      }\n    });\n  };\n\n  const handeGenerate = () => {\n    const ind = Math.floor(Math.random() * values.length);\n    if (cache.has(ind)) {\n      setDupl(true);\n      return;\n    } else {\n      const newCache = new Set(cache);\n      newCache.add(ind);\n      setCache(newCache);\n      setItem(values[ind]);\n      setDupl(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      name: \"file\",\n      onChange: changeHandler,\n      accept: \".csv\",\n      style: {\n        display: \"block\",\n        margin: \"10px auto\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handeGenerate,\n      children: \"generate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), dupl && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"duplicate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 22\n    }, this), item && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: item\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"p4PkzxtKqSBcbRwqi3Rdk2e/ox8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Papa","jsxDEV","_jsxDEV","App","_s","cache","setCache","Set","values","setValues","item","setItem","dupl","setDupl","changeHandler","event","parse","target","files","header","skipEmptyLines","complete","results","valuesArray","data","map","d","push","Object","Math","floor","random","length","handeGenerate","ind","has","newCache","add","children","type","name","onChange","accept","style","display","margin","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/nikita.sp/Desktop/random/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport {useState} from \"react\";\nimport Papa from \"papaparse\";\n\nfunction App() {\n    const [cache, setCache] = useState(new Set());\n    // State to store parsed data\n    // const [parsedData, setParsedData] = useState([]);\n\n    //State to store table Column name\n    // const [tableRows, setTableRows] = useState([]);\n\n    //State to store the values\n    const [values, setValues] = useState([]);\n\n    const [item, setItem] = useState();\n    const [dupl, setDupl] = useState(false);\n\n    const changeHandler = (event) => {\n        // Passing file data (event.target.files[0]) to parse using Papa.parse\n        Papa.parse(event.target.files[0], {\n            header: true,\n            skipEmptyLines: true,\n            complete: function (results) {\n                // const rowsArray = [];\n                const valuesArray = [];\n\n                // Iterating data to get column name and their values\n                results.data.map((d) => {\n                    // rowsArray.push(Object.keys(d));\n                    valuesArray.push(Object.values(d));\n                });\n\n                // const item = valuesArray[Math.floor(Math.random()*valuesArray.length)]\n                setItem(valuesArray[Math.floor(Math.random()*valuesArray.length)])\n\n                // Parsed Data Response in array format\n                // setParsedData(results.data);\n\n                // Filtered Column Names\n                // setTableRows(rowsArray[0]);\n\n                // Filtered Values\n                // setValues(valuesArray);\n            },\n        });\n    };\n\n    const handeGenerate = () => {\n        const ind = Math.floor(Math.random()*values.length);\n        if (cache.has(ind)) {\n            setDupl(true);\n            return;\n        } else {\n            const newCache = new Set(cache);\n            newCache.add(ind);\n            setCache(newCache);\n            setItem(values[ind]);\n            setDupl(false);\n        }\n\n    }\n\n    return (\n        <div>\n            {/* File Uploader */}\n            <input\n                type=\"file\"\n                name=\"file\"\n                onChange={changeHandler}\n                accept=\".csv\"\n                style={{display: \"block\", margin: \"10px auto\"}}\n            />\n            <br/>\n            <button onClick={handeGenerate}>generate</button>\n            <br/>\n            {dupl && <div>duplicate</div>}\n            {item && <div>{item}</div>}\n            <br/>\n            {/* Table */}\n            {/*<table>*/}\n            {/*    /!*<thead>*!/*/}\n            {/*    /!*<tr>*!/*/}\n            {/*    /!*    {tableRows.map((rows, index) => {*!/*/}\n            {/*    /!*        return <th key={index}>{rows}</th>;*!/*/}\n            {/*    /!*    })}*!/*/}\n            {/*    /!*</tr>*!/*/}\n            {/*    /!*</thead>*!/*/}\n            {/*    <tbody>*/}\n            {/*    {values.map((value, index) => {*/}\n            {/*        return (*/}\n            {/*            <tr key={index}>*/}\n            {/*                {value.map((val, i) => {*/}\n            {/*                    return <td key={i}>{val}</td>;*/}\n            {/*                })}*/}\n            {/*            </tr>*/}\n            {/*        );*/}\n            {/*    })}*/}\n            {/*    </tbody>*/}\n            {/*</table>*/}\n        </div>\n    );\n}\n\nexport default App;\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}